关于Mars：
１．关闭delaying branching
２．memory configuration设为default

关于寄存器分配:

寄存器分配时以基本块为单位(把函数/过程调用也当做分隔基本块的标志)，对每个基本块分别建立next-use 信息

创建一个数据结构----Register_Address_Desc ，　保存了Address_Descs(Field为Id 以及　一个list，表示存储他的寄存器.)(symboltable )，存储了本函数所有用到的变量---参数，普通变量(本层和上层)，临时变量,以及他们对应的存储；以及一个Register_Desc(array)，保存了寄存器当前存储的变量名．

扫描两遍，第一遍从block的最后一条指令开始，把遇到的所有变量都加入Address_Descs(并为临时变量赋予相对于fp的offset), 并为每个四元式提供相关变量的next-use信息.

第二遍从第一个基本块的第一条指令开始，首先把符号表里普通变量的Address Desciptor设为他自己.然后调用getReg，为每个变量分配寄存器．

使用这些分配的寄存器完成四元式操作．
k0 是专门用来进行存储时用到的临时变量寄存器．随用随取，不参与临时寄存器分配．
k1,t8,t9 是当所有寄存器的变量都是有next-use时，使用的一个寄存器，使用了就存回．

关于变量的管理:
当一个变量被赋值时，立即从寄存器写回内存中，但是具体是否回收寄存器取决于next-use的信息.
当一个变量被引用时，是否回收寄存器取决于next-use信息.


函数过程调用规范：

for program level at j
				   -----------------------------------------
				   |	              pn                   |      <--- fp+para_used
				   -----------------------------------------
				   |	              pn-1                 |        
				   -----------------------------------------
				   |	              pn-2                 |
				   -----------------------------------------
				   |	               .                   |
				   |	               .                   |
				   |	               .                   |
				   -----------------------------------------
				   |	               p1                  |      <--- fp+display_offset
				   -----------------------------------------
				   |	               d1                  |      <--- fp+para_offset
				   -----------------------------------------
				   |	               d2                  |
				   -----------------------------------------
				   |	               .                   |
				   |	               .                   |
				   |	               .                   |
				   -----------------------------------------
				   |	              dj-1                 |
				   -----------------------------------------
				   |	               sp                  |
				   -----------------------------------------
				   |	               fp                  |
				   -----------------------------------------
				   |	            ret addr               |
				   -----------------------------------------
				   | ret v(for func) / local var1(for proc)|      <--- fp      
				   -----------------------------------------
				   |	               .                   |
				   |	               .                   |
				   |	               .                   |
				   |	               .                   |
				   |	               .                   |
				   |	               .                   |
				   -----------------------------------------
				   |	                                   |      <--- sp = fp + used
				   -----------------------------------------
