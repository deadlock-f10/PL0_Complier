Lexer 在做语法分析时，如果遇到了undefineed token时，直接输出错误信息并跳过此token

出现的exception一共两大类,

一类是token match error　属于语法的错误
另一类是type match error 属于语义的错误

只要出现exception ，就把parser的cangencode 设为 false,　并在最后抛出异常
parser里有一个errorcount域，记录检测到的错误个数，超过规定个数(max_errors)直接退出.


综上，catch exception 的地方一共只有四个，constants()(常量定义时出现错误则跳到下一个定义) , variables(变量定义时出现错误则跳到下一个变量定义), seq_paf(), compoundstmt()

当常量定义出现错误时，synchronizing token是T_COMMA以及T_SEMICOLON	

未检查标示符重名的问题．

目前遇到了一个非常重大的问题，一些临时变量会跨越基本块的边界，而为临时变量分配地址是在基本块内部独立做的，这样会导致为临时变量重复分配地址．但因为临时变量总会先被定义再使用，所以我们从第一个基本块开始，只为在等号左边或者被赋值的临时变量分配地址.

不行．有可能先遇到临时变量被使用．


在write expr这样的形式中，如果expr的结果是一个字符型，则输出字符型．否则输出整数．
如果要按老师的理解，只要expr是表达式就输出表达式的话，需要的parser/parsestmt/outputstatement里修改一下,把得到的expr都改为整型．
